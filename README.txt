PROPAGATION用来定义事务的传播行为，用来解决业务层方法的相互调用所产生的事务应该如何传递的问题。 事务控制加在业务层，那么怎么在业务层控制事务呢？ 
平台事务管理器通过事务的隔离级别和传播行为来进行事务的管理，在这期间，需要判断事务的状态，如可能已经产生了保存点，或事务是一个新的事务。

Spring支持两种方式事务管理。这里重点需要掌握声明式事务管理，因为不需要编写代码来进行事务的管理。声明式的事务管理通过AOP来时，进行代码增强。代码执行前开启事务，代码执行末尾提交事务。需要一个事务管理环境进行开发，所以需要搭建事务管理环境。创建数据库和表，如账户表（id,name,money），分别向表中插入数据。并初始化金额。
AccountServiceImpl（这里进行编程式事务管理）

为了方便对事务进行管理，spring提供了TransactionTemplate来方便对事务进行管理。（这和JdbcTemplate方便对数据库操作如出一辙）
可见，进行编程式的事务管理，需要程序员手动更改service的代码，这种方式不好，对于开发来说不经常用。不如声明式的事务管理，基于AOP思想。
声明式事务管理
方法一：基于TransactionProxyFactoryBean
方法二：基于AspectJ的XML方式
基于TransactionProxyFactoryBean的方式进行事务管理，商品，订单，等都需要定义，配置文件中需要配置很多的TransactionProxyFactoryBean，不方便。使用基于AspectJ的方式进行事务管理更加方便。

AspectJ是开源第三方的AOP开发框架，其可以简化Spring进行AOP开发。
因为是基于XML方式实现的，所以不需要更改源代码。但是需要修改applicationContext.xml
方法三：使用注解配置声明式事务（在业务层添加Transactional注解，在xml中打开事务注解驱动）
